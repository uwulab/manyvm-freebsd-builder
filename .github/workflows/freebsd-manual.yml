name: setup-freebsd-manual

on:
  workflow_dispatch:
    inputs:
      release:
        required: true
      arch:
        required: true
      freebsd_arch:
        required: true
      riscv64_bootloader:
        required: false
        default: "2024.01-1.4"
      debug:
        required: false
        default: "false"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.release }}-${{ github.event.inputs.arch }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      QEMU_VERSION: "8.2.2"
      OS_TYPE: freebsd

    name: FreeBSD ${{ inputs.arch }} ${{ inputs.release }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gcc g++ git build-essential gettext \
            libxml2-utils xsltproc libglib2.0-dev gnutls-dev python3-docutils libslirp-dev \
            libyajl-dev meson libosinfo-1.0-dev libcurl4-openssl-dev libreadline-dev \
            libnl-3-dev libudev-dev flex libnfs-dev libssh-dev libssh2-1-dev libpng-dev \
            bison libusb-dev libsnappy-dev libsdl2-dev libpam0g-dev libbz2-dev liblzma-dev \
            libzstd-dev libcap-ng-dev libjpeg-dev libvde-dev libvdeplug-dev liblzo2-dev \
            libspice-server-dev libspice-protocol-dev ovmf

      - name: Cache Precompiled QEMU
        id: cache-qemu
        uses: actions/cache@v4
        with:
          key: qemu-${{ env.QEMU_VERSION }}-x86_64-linux-gnu
          path: |
            ./qemu-x86_64-linux-gnu.tar.xz

      - name: Download Precompiled QEMU
        if: steps.cache-qemu.outputs.cache-hit != 'true'
        run: |
          curl -fSL "https://github.com/cocoa-xu/qemu-build/releases/download/v${{ env.QEMU_VERSION }}/qemu-x86_64-linux-gnu.tar.xz" -o "qemu-x86_64-linux-gnu.tar.xz"

      - name: Extract Precompiled QEMU
        run: |
          mkdir qemu
          XZ_OPT=-k
          tar -xf qemu-x86_64-linux-gnu.tar.xz -C qemu

      - name: Cache FreeBSD System Image
        id: cache-freebsd-image
        uses: actions/cache@v4
        with:
          key: freebsd-${{ inputs.release }}-${{ inputs.freebsd_arch }}
          path: |
            ./FreeBSD-${{ inputs.release }}-RELEASE-${{ inputs.freebsd_arch }}.qcow2.xz

      - name: Download FreeBSD System Image
        if: steps.cache-freebsd-image.outputs.cache-hit != 'true'
        run: |
          export ARCH_IN_URL="${{ inputs.freebsd_arch }}"
          case ${{ inputs.freebsd_arch }} in
            arm64-aarch64)
              export ARCH_IN_URL="aarch64"
              ;;
            riscv-riscv64)
              export ARCH_IN_URL="riscv64"
              ;;
          esac
          case ${{ inputs.release }} in
            14.0 | 13.3 | 13.2 | 12.4)
              curl -fSL "https://download.freebsd.org/releases/VM-IMAGES/${{ inputs.release }}-RELEASE/${ARCH_IN_URL}/Latest/FreeBSD-${{ inputs.release }}-RELEASE-${{ inputs.freebsd_arch }}.qcow2.xz" -o "FreeBSD-${{ inputs.release }}-RELEASE-${{ inputs.freebsd_arch }}.qcow2.xz"
              ;;
            *)
              echo "Unsupported FreeBSD version: ${{ inputs.release }}"
              exit 1
              ;;
          esac

      - name: Extract FreeBSD System Image
        run: |
          xz -d -k FreeBSD-${{ inputs.release }}-RELEASE-${{ inputs.freebsd_arch }}.qcow2.xz

      - name: Setup System Image
        run: |
          chmod 400 $(pwd)/id_rsa

          QCOW2_FILENAME="FreeBSD-${{ inputs.release }}-RELEASE-${{ inputs.freebsd_arch }}.qcow2"
          npm install -g yarn
          yarn install

          if [ "${{ inputs.arch }}" = "riscv64" ]; then
            curl -fSL "https://github.com/uwulab/manyvm-freebsd-riscv64-boot/releases/download/v${{ inputs.riscv64_bootloader }}/fw_payload.elf" -o fw_payload.elf
          fi

          export ARGS=(
            --qemu "$(pwd)/qemu/usr/local/bin"
            --os "${{ env.OS_TYPE }}"
            --arch "${{ inputs.arch }}"
            --image "$(pwd)/${QCOW2_FILENAME}"
            --pubkey "$(pwd)/id_rsa.pub"
            --privkey "$(pwd)/id_rsa"
          )
          if [ "${{ inputs.debug }}" = "true" ]; then
            if [ "${{ inputs.arch }}" = "riscv64" ]; then
              node ./image-builder.js "${ARGS[@]}" --bios $(pwd)/fw_payload.elf --debug
            else
              node ./image-builder.js "${ARGS[@]}" --debug
            fi
          else
            if [ "${{ inputs.arch }}" = "riscv64" ]; then
              node ./image-builder.js "${ARGS[@]}" --bios $(pwd)/fw_payload.elf
            else
              node ./image-builder.js "${ARGS[@]}"
            fi
          fi

          mv "${QCOW2_FILENAME}" "manyvm-${QCOW2_FILENAME}"
          echo "Archiving manyvm-$QCOW2_FILENAME"
          xz -e -9 -T0 "manyvm-${QCOW2_FILENAME}"
          ls -lah "manyvm-${QCOW2_FILENAME}.xz"

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ inputs.release }}
          name: v${{ inputs.release }}
          files: |
            manyvm-*.xz
